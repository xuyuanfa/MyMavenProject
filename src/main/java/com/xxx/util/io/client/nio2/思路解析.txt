xuyf--2015/11/26
思路流程：
           ----reqData----->
NIOClient    workThread       NIOManager   ---------------> accept(server)、conn、read、write
             data/Thread      同步非阻塞            selectorThread
           <---respData-----
                                             异步


思路解析：
NIOClient：封装SocketChannel，连接NIOManager和请求者的封装类，包含响应事件处理器；

workThread：为每个请求数据和响应数据生成线程，异步提交注册请求事件和响应结果数据；

NIOManager：同步非阻塞NIO处理机制，workThread提交注册请求事件，selectorThread处理请求事件，通过workThread把结果响应给NIOClient；

selectorThread：操作NIO处理请求；


以上思想可用于NIO客户端，其中NIOClient并非实际上的NIO客户端，而是针对调用NIO处理机制而已的调用者。

同步：所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回（自己做到完成）；
异步：异步的概念和同步相对，当一个异步过程调用发出后，调用者不能立刻得到结果（别人做完通知）；
阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（不满足条件则线程挂起直到被唤醒接着处理）；
非阻塞：非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回（不满足条件则下次处理，要轮询）；

未实现：
1、监听器；
2、并发请求，封装请求响应数据对象，响应结果与请求对象匹配流水号处理返回结果，需要结合实际业务的报文格式；


功能：
1、不分长短连接，NioManager采用线程池异步处理请求，短连接则在响应结果后断开连接；
2、设计一，通道返回响应前不能发起请求，请求并等待返回响应结果，阻塞等待异步处理请求；
3、设计二，异步处理请求，响应结果与请求对象匹配流水号处理返回结果；

